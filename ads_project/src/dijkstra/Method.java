package dijkstra;

import java.io.*;

public class Method {
	
	//dijkstra using leftist heap
	public static void Leftist(String fileName) {
			Graph g=new Graph(fileName);
			System.out.println("The Graph is as below");
	        g.printGraph();
			int[] distance = DijkstraMethod.dijkstraLH(g);// call leftist dijkstra method to generate the distance array
			String outputfilename = "LeftistMethodOutput.txt";// output file name
		        try{
	                PrintWriter outputfile=new PrintWriter (outputfilename);  // print result
	                outputfile.println(" \nThe dijikstra path generated by LH Method is as below:");
	                for (int i=0;i<g.getNumber();i++)
	                {   
	                   outputfile.println(distance[i]+"//cost from node "+g.getSource()+" to "+i+" ");
	                }// print out edge of the dijikstra path
	                outputfile.close();
			System.out.println("\nThe shortest path of LH method has been displayed in LHMethodOutput.txt, please refer it to check the result");	      }
	            catch (IOException e) {  // catch exception
	                e.printStackTrace();
	            }
	}

	//dijkstra using fibonacci heap
	public static void Fib(String fileName) {

		Graph g=new Graph(fileName);
		System.out.println("The Graph is as below");
        g.printGraph();
		int[] distance = DijkstraMethod.dijkstraFib(g);// call fib dijkstar method to generate the distance array
		String outputfilename = "FibMethodOutput.txt";// output file name
	        try{
                PrintWriter outputfile=new PrintWriter (outputfilename);  // print result
                outputfile.println(" \nThe dijikstra path generated by Fib Method is as below:");
                for (int i=0;i<g.getNumber();i++)
                {   
                   outputfile.println(distance[i]+"//cost from node "+g.getSource()+" to "+i+" ");
                }// print out edge of the dijikstra path
                outputfile.close();
		System.out.println("\nThe shortest path of Fib method has been displayed in FibMethodOutput.txt, please refer it to check the result");	      }
            catch (IOException e) {  // catch exception
                e.printStackTrace();
            }
	}
	
	//random mode method
	public static void randomInput(int n, double d, int x) {// randomly create a graph
	
		long start = System.currentTimeMillis();
		Graph g=new Graph(n,d,x);
		long end = System.currentTimeMillis();
		System.out.println("The Graph is as below");
        g.printGraph();
		System.out.println("\nThe Time of creating a graph is: "+(end-start));
        // get run time
		long starttime1 = System.currentTimeMillis();
		int[] Ldistance = DijkstraMethod.dijkstraLH(g);
		long endtime1 = System.currentTimeMillis();
   		// set output file
		String outputfilename = "LHMethodOutput.txt";
	        try{
                PrintWriter outputfile=new PrintWriter (outputfilename);  // print result
                outputfile.println(" \nThe dijikstra path generated by LeftistHeap Method is as below:");
		
                for (int i=0;i<n;i++)
                {   
                    outputfile.println(Ldistance[i]+"//cost from node "+x+" to "+i+" ");
                }// print out edge of the dijkstra path
                outputfile.close();
                System.out.println("\nThe shortest path of LH method has been displayed in LHMethodOutput.txt, please refer it to check the result");	      
                }
            catch (IOException e) {  // catch exception
                e.printStackTrace();
            }
		// get run time
	    long starttime2 = System.currentTimeMillis();
		int[] Fdistance = DijkstraMethod.dijkstraFib(g);
		long endtime2 = System.currentTimeMillis();
		// set output file
		outputfilename = "FibMethodOutput.txt";
	        try{
                PrintWriter outputfile=new PrintWriter (outputfilename);  // print result
                outputfile.println(" \nThe dijikstra path generated by Fib Method is as below:");
		
                for (int i=0;i<n;i++)
                {   
                   outputfile.println(Fdistance[i]+"//cost from node "+x+" to "+i+" ");
                }// print out edge of the dijkstra path
                outputfile.close();
                System.out.println("\nThe shortest path of Fib method has been displayed in FIbMethodOutput.txt, please refer it to check the result");	      
                }
            catch (IOException e) {  // catch exception
                e.printStackTrace();
            }

		System.out.println("\nThe time of LH method is : " + (endtime1-starttime1));
		System.out.println("\nThe time of Fib method is: " + (endtime2-starttime2));
}
}

